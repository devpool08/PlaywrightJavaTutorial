name: Playwright Tests with Allure Reports
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Required permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

jobs:
  test:
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build & Install
        run: mvn -B install -DskipTests --no-transfer-progress

      # Fixed Windows browser installation
      - name: Install browsers (Windows)
        if: runner.os == 'Windows'
        run: |
          mvn exec:java -e "-Dexec.mainClass=com.microsoft.playwright.CLI" "-Dexec.args=install --with-deps"
        shell: cmd

      - name: Install browsers (Unix)
        if: runner.os != 'Windows'
        run: mvn exec:java -e -Dexec.mainClass=com.microsoft.playwright.CLI -Dexec.args="install --with-deps"

      # Ensure allure-results directory exists
      - name: Create Allure results directory
        run: mkdir -p target/allure-results
        shell: bash

      - name: Run intentionally failing screenshot test
        run: mvn test -Dtest=org.example.day4.TestScreenshots#takeScreenshot -Dmaven.test.failure.ignore=true
        continue-on-error: true

      - name: Run remaining tests (excluding TestScreenshots)
        run: mvn test -Dsurefire.excludes=**/TestScreenshots.java

      # Upload allure-results as artifacts for each OS
      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-${{ matrix.os }}
          path: target/allure-results/
          retention-days: 20

  # Fixed report generation job
  publish-report:
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - uses: actions/checkout@v4

      # Setup GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v3

      # Download all allure-results from different OS
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: allure-results-combined

      # Combine all results from different platforms
      - name: Combine Allure Results
        run: |
          mkdir -p combined-allure-results
          # Copy results from all platforms if they exist
          find allure-results-combined -name "*.json" -o -name "*.txt" -o -name "*.properties" -o -name "*.csv" | while read file; do
            cp "$file" combined-allure-results/ || true
          done
          # Also copy any attachments
          find allure-results-combined -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.webm" -o -name "*.zip" \) | while read file; do
            cp "$file" combined-allure-results/ || true
          done
          ls -la combined-allure-results/

      # Get Allure history for trend data
      - name: Get Allure history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages-history

      - name: Copy history
        if: always()
        continue-on-error: true
        run: |
          mkdir -p allure-history
          if [ -d "gh-pages-history/allure-history" ]; then
            cp -r gh-pages-history/allure-history/* allure-history/ || true
          fi

      # Generate Allure report using a more reliable action
      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@master
        if: always()
        with:
          allure_results: combined-allure-results
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 20

      # Upload Pages artifact
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v2
        if: always()
        with:
          path: allure-history

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        if: always()
        uses: actions/deploy-pages@v2

  # Alternative: Deploy using peaceiris action (if the above doesn't work)
  deploy-alternative:
    runs-on: ubuntu-latest
    needs: test
    if: failure() && always()  # Only runs if the main publish-report job fails

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: allure-results-combined

      - name: Combine results
        run: |
          mkdir -p combined-allure-results
          find allure-results-combined -type f | while read file; do
            cp "$file" combined-allure-results/ || true
          done

      - name: Generate Allure Report (Alternative)
        run: |
          # Install Allure
          wget https://github.com/allure-framework/allure2/releases/download/2.25.0/allure-2.25.0.tgz
          tar -xzf allure-2.25.0.tgz
          sudo mv allure-2.25.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          
          # Generate report
          allure generate combined-allure-results -o allure-report --clean

      - name: Deploy with peaceiris
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-report
