name: Playwright Tests with Allure Reports
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build & Install
        run: mvn -B install -DskipTests --no-transfer-progress

      - name: Install browsers
        run: mvn exec:java -e -Dexec.mainClass=com.microsoft.playwright.CLI -Dexec.args="install --with-deps"

      - name: Create Allure results directory
        run: mkdir -p target/allure-results

      - name: Run intentionally failing screenshot test
        run: mvn test -Dtest=org.example.day4.TestScreenshots#takeScreenshot -Dmaven.test.failure.ignore=true
        continue-on-error: true

      - name: Run remaining tests (excluding TestScreenshots)
        run: mvn test -Dsurefire.excludes=**/TestScreenshots.java

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-${{ matrix.os }}
          path: target/allure-results/
          retention-days: 20

  # Simplified report generation
  generate-report:
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Download all test results
      - name: Download Ubuntu Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: allure-results
        continue-on-error: true

      - name: Download macOS Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-macos-latest
          path: allure-results
        continue-on-error: true

      # Debug: Check what we have
      - name: List allure results
        run: |
          echo "Contents of allure-results:"
          ls -la allure-results/ || echo "No allure-results directory found"
          find . -name "*.json" -type f | head -5

      # Install Allure
      - name: Setup Allure
        run: |
          wget -q https://github.com/allure-framework/allure2/releases/download/2.25.0/allure-2.25.0.tgz
          tar -xzf allure-2.25.0.tgz
          sudo mv allure-2.25.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          allure --version

      # Generate report
      - name: Generate Allure report
        run: |
          if [ -d "allure-results" ] && [ "$(ls -A allure-results)" ]; then
            allure generate allure-results -o allure-report --clean
            echo "Report generated successfully"
          else
            echo "No allure results found, creating empty report"
            mkdir -p allure-report
            echo "<h1>No test results found</h1>" > allure-report/index.html
          fi

      # Deploy using the most reliable method
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-report
          force_orphan: true
